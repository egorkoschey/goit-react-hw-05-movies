{"version":3,"file":"static/js/MoviesView.9b4d8b68.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/Components/MoviesList/moviesList.module.css?db83","Components/MoviesList/MoviesList.js","api/constants.js","api/helpers.js","api/api.js","webpack://react-homework-template/./src/Components/SearchForm/searchForm.module.css?e323","Components/SearchForm/SearchForm.js","views/MoviesView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"moviesList_section__CjbMR\",\"list\":\"moviesList_list__FswJ0\",\"item\":\"moviesList_item__7pkNG\",\"link\":\"moviesList_link__tMBig\"};","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport styles from './moviesList.module.css';\n\nconst MoviesList = ({ movies }) => {\n  return (\n    <section className={styles.section}>\n      <ul className={styles.list}>\n        {movies.map(({ title, id }) => (\n          <li key={id} className={styles.item}>\n            <Link className={styles.link} to={`/movies/${id}`}>\n              {title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default MoviesList;\n","export const BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_KEY = '69ec84cfd3d16e3fd5d2c92a4c37bd55';\n","export const getListData = res => res.data.results.map(({ title, id }) => ({ title, id }));\n","import axios from 'axios';\nimport { API_KEY, BASE_URL } from './constants';\nimport { getListData } from './helpers';\n\nconst _axios = axios.create({ baseURL: BASE_URL });\n\nexport const getTrending = () =>\n  _axios.get(`/trending/movie/week?api_key=${API_KEY}&limit=20`).then(getListData);\n\nexport const getMoviesByQuery = query =>\n  _axios.get(`/search/movie?api_key=${API_KEY}&limit=20&query=${query}`).then(getListData);\n\nexport const getMovieDetails = id =>\n  _axios\n    .get(`/movie/${id}?api_key=${API_KEY}`)\n    .then(res => res.data)\n    .then(({ title, poster_path, vote_average, overview, genres }) => ({\n      title,\n      poster_path,\n      vote_average,\n      overview,\n      genres,\n    }));\n\nexport const getCastInfo = id =>\n  _axios.get(`/movie/${id}/credits?api_key=${API_KEY}`).then(res =>\n    res.data.cast.map(({ id, profile_path, original_name, character }) => ({\n      id,\n      profile_path,\n      original_name,\n      character,\n    })),\n  );\n\nexport const getReviewsInfo = id =>\n  _axios\n    .get(`movie/${id}/reviews?api_key=${API_KEY}`)\n    .then(res => res.data.results.map(({ id, author, content }) => ({ id, author, content })));\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"searchForm_form__g2fKy\",\"input\":\"searchForm_input__K3D-r\",\"button\":\"searchForm_button__jyg2V\"};","import React, { useState } from 'react';\nimport { PropTypes } from 'prop-types';\nimport styles from './searchForm.module.css';\nimport { Notify } from 'notiflix';\n\nconst SearchForm = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const onChange = ({ target }) => setQuery(target.value);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!query) {\n      Notify.failure('Empty query');\n      return;\n    }\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <input className={styles.input} type=\"text\" value={query} onChange={onChange} />\n      <button className={styles.button} type=\"submit\">\n        Search\n      </button>\n    </form>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchForm;","import { Notify } from 'notiflix';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { getMoviesByQuery } from '../api/api';\nimport SearchForm from '../Components/SearchForm';\nimport MoviesList from '../Components/MoviesList/MoviesList';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport qs from 'qs';\nimport { QueryContext } from '../Components/App';\n\nconst MoviesView = () => {\n  const [movies, setMovies] = useState([]);\n  const { query, setQuery } = useContext(QueryContext);\n  const { search, pathname } = useLocation();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n  if (search.includes('query')) {\n    setQuery(qs.parse(search.replace('?', '')).query);\n    return;\n  }\n  setQuery('');\n}, [search, setQuery]);\n\nuseEffect(() => {\n  let cancelled = false;\n\n  !query && setMovies([]);\n\n  if (query) {\n    navigate(`${pathname}?query=${query}`);\n    getMoviesByQuery(query)\n      .then(data => !cancelled && setMovies(data))\n      .catch(() => Notify.failure('Something went wrong!'));\n  }\n\n  return () => {\n    cancelled = true;\n  };\n}, [query, navigate, pathname, setMovies]);\n\n  const onSubmit = query => setQuery(query);\n\n  return (\n    <>\n      <SearchForm onSubmit={onSubmit} />\n      <MoviesList movies={movies} />\n    </>\n  );\n};\n\nexport default MoviesView;"],"names":["_ref","movies","_jsx","className","styles","children","map","_ref2","title","id","Link","to","concat","API_KEY","getListData","res","data","results","_axios","axios","create","baseURL","getTrending","get","then","getMoviesByQuery","query","getMovieDetails","poster_path","vote_average","overview","genres","getCastInfo","cast","profile_path","original_name","character","getReviewsInfo","_ref3","author","content","onSubmit","_useState","useState","_useState2","_slicedToArray","setQuery","_jsxs","e","preventDefault","Notify","failure","type","value","onChange","target","setMovies","_useContext","useContext","QueryContext","_useLocation","useLocation","search","pathname","navigate","useNavigate","useEffect","includes","qs","replace","cancelled","catch","_Fragment","SearchForm","MoviesList"],"sourceRoot":""}